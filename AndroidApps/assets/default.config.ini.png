# This file contains device-specific configuration information
# that is read by the infrastructure at launch.
# Property names beginning with "config." are reserved and should not be used.

#------------------------------------------------
# debug config
#   Levels: v:2  d:3  i:4  w:5  e:6
#------------------------------------------------

debug.enable=1
debug.level=5

#------------------------------------------------
# basic network config values
#------------------------------------------------

#  hostname must be a full name
net.hostname=default.12au.cse461.

# list of class names of services to be started
net.services=edu.uw.cs.cse461.Net.Base.DataXferRawService \
             edu.uw.cs.cse461.Net.Base.EchoRawService \
             edu.uw.cs.cse461.Net.TCPMessageHandler.EchoTCPMessageHandlerService \
             edu.uw.cs.cse461.Net.RPC.RPCService \
             edu.uw.cs.cse461.Net.RPC.RPCCall \
             edu.uw.cs.cse461.Net.RPC.EchoRPCService \
             edu.uw.cs.cse461.Net.DDNS.DDNSResolverService \
             edu.uw.cs.cse461.Net.DDNS.DDNSService \
             edu.uw.cs.cse461.HTTP.HTTPDService
            
# List of class names of console applications to load
#   and name of initial application to launch.
# (Ignored if running under Android.)
console.apps=edu.uw.cs.cse461.ConsoleApps.Infrastructure.AppManager \
        edu.uw.cs.cse461.ConsoleApps.DataXferRaw \
        edu.uw.cs.cse461.ConsoleApps.DumpServiceState \
        edu.uw.cs.cse461.ConsoleApps.EchoRaw \
        edu.uw.cs.cse461.ConsoleApps.nslookup \
        edu.uw.cs.cse461.ConsoleApps.PingRaw \
        edu.uw.cs.cse461.ConsoleApps.Version \
        edu.uw.cs.cse461.ConsoleApps.WhoAmI
# this name must be the one provided by app.loadablename()
console.initialapp=appmanager

# List of class names of Android applications to load
android.apps=edu.uw.cs.cse461.AndroidApps.Infrastructure.AndroidAppManager \
             edu.uw.cs.cse461.AndroidApps.EchoRawActivity   \
             edu.uw.cs.cse461.AndroidApps.PingRPCActivity   \
             edu.uw.cs.cse461.AndroidApps.SNetActivity      \
             edu.uw.cs.cse461.AndroidApps.VersionActivity
android.initialapp=AndroidAppManager

#------------------------------------------------
# rpc config
#  Timeouts are in seconds
#------------------------------------------------
rpc.timeout=10
rpc.persistencetimeout=30
rpc.serverport=

#------------------------------------------------
# ddns resolver config
#------------------------------------------------
ddnsresolver.cachettl=60
ddnsresolver.serverttl=10
ddnsresolver.password=

#------------------------------------------------
# ddns config
#------------------------------------------------
ddns.rootserver=attu2.cs.washington.edu
ddns.rootport=46120

ddns.nodes=soa:default.12au.cse461.:samplePassword \

ddns.resolvettl=300

#------------------------------------------------
# httpd config
#------------------------------------------------
httpd.port=
httpd.name=default.12au.www

#------------------------------------------------
# Echo and Ping configs
#   Both apps use the server and port information.
#------------------------------------------------
ping.ntrials=20
ping.sockettimeout=500

echo.sockettimeout=500

echoraw.server=attu2.cs.washington.edu
echoraw.udpport=46102
echoraw.tcpport=46102

echotcpmessagehandler.server=attu2.cs.washington.edu
echotcpmessagehandler.port=46111

echorpc.server=attu2.cs.washington.edu
echorpc.port=46120

echoddns.server=.

#------------------------------------------------
# Filexfer configs
#------------------------------------------------

dataxferraw.ntrials=5
# sockettimeout is in msec.
dataxferraw.sockettimeout=500
dataxferraw.server=attu2.cs.washington.edu

# The raw server uses four consecutive ports, starting at baseport, for xfer sizes of 1000, 10000, 100000, and 1000000 bytes.
# There are both UDP and TCP sockets bound to those four port numbers.

dataxferraw.baseport=46104

#------------------------------------------------
# SNet configs
#------------------------------------------------

# the maximum number of bytes fetchPhoto() is willing to return in a single call 
snet.fetchphoto_maxlength=2097152
